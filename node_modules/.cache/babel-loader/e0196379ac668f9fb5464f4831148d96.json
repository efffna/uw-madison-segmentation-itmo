{"ast":null,"code":"import axios from 'axios'; //Upload image\n\nconst uploadFileHandler = async function (e) {\n  let folder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let setUploading = arguments.length > 2 ? arguments[2] : undefined;\n  let prevImages = arguments.length > 3 ? arguments[3] : undefined;\n  let setImages = arguments.length > 4 ? arguments[4] : undefined;\n  let multiple = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  const formData = new FormData();\n\n  if (multiple) {\n    const files = e;\n\n    for (let i = 0; i < files.length; i++) {\n      formData.append('imagesUp', files[i]);\n    }\n  } else {\n    formData.append('imagesUp', e.target.files[0]);\n  }\n\n  setUploading(true);\n\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Folder: folder\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/upload', formData, config);\n    multiple ? setImages(prevImages.concat(data.data)) : setImages(data.data[0]);\n    setUploading(false);\n  } catch (error) {\n    console.error(error);\n    setUploading(false);\n  }\n};\n\nexport const uploadEditorFileHandler = async file => {\n  const formData = new FormData();\n  formData.append('imagesUp', file);\n\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Folder: 'editor'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/upload', formData, config);\n    return data.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n/* export const uploadEditorFileHandler = file => {\n\tconst formData = new FormData()\n\tformData.append('imagesUp', file)\n\n\tconst config = {\n\t\theaders: {\n\t\t\t'Content-Type': 'multipart/form-data',\n\t\t\tFolder: 'editor',\n\t\t},\n\t}\n\n\treturn axios\n\t\t.post('/api/upload', formData, config)\n\t\t.then(result => {\n\t\t\treturn { data: { link: result.data.data[0].path } }\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(error)\n\t\t\treturn Promise.reject(error)\n\t\t})\n} */\n\nexport default uploadFileHandler;","map":{"version":3,"names":["axios","uploadFileHandler","e","folder","setUploading","prevImages","setImages","multiple","formData","FormData","files","i","length","append","target","config","headers","Folder","data","post","concat","error","console","uploadEditorFileHandler","file"],"sources":["/Users/annaefimova/Desktop/frontend/src/App.jsx"],"sourcesContent":["import axios from 'axios'\n\n//Upload image\nconst uploadFileHandler = async (\n\te,\n\tfolder = null,\n\tsetUploading,\n\tprevImages,\n\tsetImages,\n\tmultiple = true\n) => {\n\tconst formData = new FormData()\n\tif (multiple) {\n\t\tconst files = e\n\n\t\tfor (let i = 0; i < files.length; i++) {\n\t\t\tformData.append('imagesUp', files[i])\n\t\t}\n\t} else {\n\t\tformData.append('imagesUp', e.target.files[0])\n\t}\n\n\tsetUploading(true)\n\n\ttry {\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'multipart/form-data',\n\t\t\t\tFolder: folder,\n\t\t\t},\n\t\t}\n\n\t\tconst { data } = await axios.post('/api/upload', formData, config)\n\n\t\tmultiple ? setImages(prevImages.concat(data.data)) : setImages(data.data[0])\n\t\tsetUploading(false)\n\t} catch (error) {\n\t\tconsole.error(error)\n\t\tsetUploading(false)\n\t}\n}\n\nexport const uploadEditorFileHandler = async file => {\n\tconst formData = new FormData()\n\tformData.append('imagesUp', file)\n\n\ttry {\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'multipart/form-data',\n\t\t\t\tFolder: 'editor',\n\t\t\t},\n\t\t}\n\n\t\tconst { data } = await axios.post('/api/upload', formData, config)\n\n\t\treturn data.data\n\t} catch (error) {\n\t\tconsole.error(error)\n\t}\n}\n\n/* export const uploadEditorFileHandler = file => {\n\tconst formData = new FormData()\n\tformData.append('imagesUp', file)\n\n\tconst config = {\n\t\theaders: {\n\t\t\t'Content-Type': 'multipart/form-data',\n\t\t\tFolder: 'editor',\n\t\t},\n\t}\n\n\treturn axios\n\t\t.post('/api/upload', formData, config)\n\t\t.then(result => {\n\t\t\treturn { data: { link: result.data.data[0].path } }\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(error)\n\t\t\treturn Promise.reject(error)\n\t\t})\n} */\n\nexport default uploadFileHandler"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG,gBACzBC,CADyB,EAOrB;EAAA,IALJC,MAKI,uEALK,IAKL;EAAA,IAJJC,YAII;EAAA,IAHJC,UAGI;EAAA,IAFJC,SAEI;EAAA,IADJC,QACI,uEADO,IACP;EACJ,MAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;;EACA,IAAIF,QAAJ,EAAc;IACb,MAAMG,KAAK,GAAGR,CAAd;;IAEA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;MACtCH,QAAQ,CAACK,MAAT,CAAgB,UAAhB,EAA4BH,KAAK,CAACC,CAAD,CAAjC;IACA;EACD,CAND,MAMO;IACNH,QAAQ,CAACK,MAAT,CAAgB,UAAhB,EAA4BX,CAAC,CAACY,MAAF,CAASJ,KAAT,CAAe,CAAf,CAA5B;EACA;;EAEDN,YAAY,CAAC,IAAD,CAAZ;;EAEA,IAAI;IACH,MAAMW,MAAM,GAAG;MACdC,OAAO,EAAE;QACR,gBAAgB,qBADR;QAERC,MAAM,EAAEd;MAFA;IADK,CAAf;IAOA,MAAM;MAAEe;IAAF,IAAW,MAAMlB,KAAK,CAACmB,IAAN,CAAW,aAAX,EAA0BX,QAA1B,EAAoCO,MAApC,CAAvB;IAEAR,QAAQ,GAAGD,SAAS,CAACD,UAAU,CAACe,MAAX,CAAkBF,IAAI,CAACA,IAAvB,CAAD,CAAZ,GAA6CZ,SAAS,CAACY,IAAI,CAACA,IAAL,CAAU,CAAV,CAAD,CAA9D;IACAd,YAAY,CAAC,KAAD,CAAZ;EACA,CAZD,CAYE,OAAOiB,KAAP,EAAc;IACfC,OAAO,CAACD,KAAR,CAAcA,KAAd;IACAjB,YAAY,CAAC,KAAD,CAAZ;EACA;AACD,CArCD;;AAuCA,OAAO,MAAMmB,uBAAuB,GAAG,MAAMC,IAAN,IAAc;EACpD,MAAMhB,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;EACAD,QAAQ,CAACK,MAAT,CAAgB,UAAhB,EAA4BW,IAA5B;;EAEA,IAAI;IACH,MAAMT,MAAM,GAAG;MACdC,OAAO,EAAE;QACR,gBAAgB,qBADR;QAERC,MAAM,EAAE;MAFA;IADK,CAAf;IAOA,MAAM;MAAEC;IAAF,IAAW,MAAMlB,KAAK,CAACmB,IAAN,CAAW,aAAX,EAA0BX,QAA1B,EAAoCO,MAApC,CAAvB;IAEA,OAAOG,IAAI,CAACA,IAAZ;EACA,CAXD,CAWE,OAAOG,KAAP,EAAc;IACfC,OAAO,CAACD,KAAR,CAAcA,KAAd;EACA;AACD,CAlBM;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAepB,iBAAf"},"metadata":{},"sourceType":"module"}